pipeline {
    agent any 
    environment {
        ops_scripts = '/app/ops-scripts'
        compose_path = '/app/docker/noted'
    }
    stages {
        stage ('postgres_avatars_dump') {
            steps {
                sh ''' 
                    sudo ${ops_scripts}/psql_dump.sh
                    sudo ${ops_scripts}/avatars_dump.sh 
                '''
            }
        }
        stage ('docker_data_prune') {
            steps {
                sh ''' 
                    docker stop $(docker ps -a -q)
                    docker system prune -a --volumes -f
                '''
            }
        }
        stage ('maintenance_up') {
            steps {
                sh 'sudo service nginx start'
            }
        }
        stage ('git_clone') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/welel/noted.git'
            }
        }
        stage ('docker_build') {
            steps {
                sh 'docker-compose -f ${compose_path}/docker-compose.prod.yaml build'
            }
        }
        stage ('maintenance_down') {
            steps {
                sh 'sudo service nginx stop'
            }
        }
        stage ('docker_start') {
            steps {
                sh 'docker-compose -f ${compose_path}/docker-compose.prod.yaml up -d'
            }
        }
        stage ('postgres_avatars_restore') {
            steps {
                sh '''
                    sleep 5
                    sudo ${ops_scripts}/psql_restore.sh
                    sudo ${ops_scripts}/avatars_restore.sh 
                 '''
            }
        }
        stage ('logs') {
            steps {
                sh ''' 
                sleep 40
                docker logs noted-db
                docker logs noted-nginx
                docker logs noted-django 
                curl -i https://welel-noted.site/
                '''
            }
        }
    }
    post {
        failure {
            withCredentials([string(credentialsId: 'chatToken', variable: 'TOKEN'), string(credentialsId: 'chatID', variable: 'CHAT_ID')]) {
            sh ''' 
                docker stop $(docker ps -a -q)
                service nginx start  
                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='noted-app-prod : *Результат сборки* : Ошибка'
            '''
            }
        }
        success {
            withCredentials([string(credentialsId: 'chatToken', variable: 'TOKEN'), string(credentialsId: 'chatID', variable: 'CHAT_ID')]) {
            sh ''' 
                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='noted-app-prod : *Результат сборки* : Успешно'
            '''
            }
        }
    }
}
